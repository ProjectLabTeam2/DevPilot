- name: Configurar EC2 para DevPilot (Flask + React)
  hosts: web
  become: true

  vars:
    app_root: /home/ubuntu/DevPilot
    backend_dir: "{{ app_root }}/Backend"
    frontend_dir: "{{ app_root }}/frontend"
    venv_dir: "{{ backend_dir }}/venv"

  tasks:
    - name: Instalar paquetes del sistema
      apt:
        name:
          - python3-venv
          - python3-pip
          - git
          - nginx
          - nodejs
          - npm
        update_cache: yes
        state: latest

    - name: Eliminar directorio existente si hay problemas de permisos
      file:
        path: "{{ app_root }}"
        state: absent
      ignore_errors: yes

    - name: Clonar repositorio DevPilot
      git:
        repo: 'https://github.com/ProjectLabTeam2/DevPilot.git'
        dest: "{{ app_root }}"
        version: main
        force: yes
      become_user: ubuntu

    - name: Eliminar venv si est√° corrupto
      file:
        path: "{{ venv_dir }}"
        state: absent
      ignore_errors: yes

    - name: Crear virtualenv
      shell: |
        cd {{ backend_dir }}
        python3 -m venv venv
      become_user: ubuntu
      args:
        creates: "{{ venv_dir }}/bin/activate"

    - name: Actualizar pip en el virtualenv
      pip:
        name: pip
        state: latest
        virtualenv: "{{ venv_dir }}"
      become_user: ubuntu

    - name: Instalar dependencias desde requirements.txt
      pip:
        requirements: "{{ backend_dir }}/requirements.txt"
        virtualenv: "{{ venv_dir }}"
      become_user: ubuntu

    - name: Instalar gunicorn en el virtualenv
      pip:
        name: gunicorn
        state: present
        virtualenv: "{{ venv_dir }}"
      become_user: ubuntu

    - name: Copiar archivo .env al servidor
      copy:
        dest: "{{ backend_dir }}/.env"
        content: |
          FLASK_ENV=production
          SECRET_KEY={{ lookup('env','SECRET_KEY') }}
          JWT_SECRET_KEY={{ lookup('env','JWT_SECRET_KEY') }}
          DB_HOST={{ lookup('env','RDS_ENDPOINT') }}
          DB_USER={{ lookup('env','DB_USER') }}
          DB_PASSWORD={{ lookup('env','DB_PASSWORD') }}
          DB_NAME=devpilotdb
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Ejecutar flask db upgrade
      shell: |
        cd {{ backend_dir }}
        {{ venv_dir }}/bin/flask db upgrade
      args:
        executable: /bin/bash
      become_user: ubuntu
      environment:
        FLASK_ENV: production
        FLASK_APP: run.py
        SECRET_KEY: "{{ lookup('env','SECRET_KEY') | default('dev-secret-key-change-in-production') }}"
        JWT_SECRET_KEY: "{{ lookup('env','JWT_SECRET_KEY') | default('dev-jwt-secret-change-in-production') }}"
        DB_HOST: "{{ lookup('env','RDS_ENDPOINT') | default('localhost') }}"
        DB_USER: "{{ lookup('env','DB_USER') | default('postgres') }}"
        DB_PASSWORD: "{{ lookup('env','DB_PASSWORD') | default('password') }}"
        DB_NAME: devpilotdb


    - name: Construir frontend con npm
      shell: |
        npm ci
        npm run build
      args:
        chdir: "{{ frontend_dir }}"
        creates: "{{ frontend_dir }}/dist"
      become_user: ubuntu

    - name: Configurar Nginx para servir la app
      copy:
        dest: /etc/nginx/sites-available/devpilot
        content: |
          server {
              listen 80;
              server_name _;

              root {{ frontend_dir }}/dist;
              index index.html;

              location /api/ {
                  proxy_pass http://127.0.0.1:5000;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
              }

              location / {
                  try_files $uri $uri/ /index.html;
              }
          }
      notify:
        - Enable Nginx site

    - name: Disable default Nginx site
      file:
        path: /etc/nginx/sites-enabled/default
        state: absent
      notify:
        - Reload Nginx

    - name: Crear servicio systemd para Gunicorn
      copy:
        dest: /etc/systemd/system/gunicorn.service
        content: |
          [Unit]
          Description=Gunicorn for DevPilot
          After=network.target

          [Service]
          User=ubuntu
          WorkingDirectory={{ backend_dir }}
          EnvironmentFile={{ backend_dir }}/.env
          ExecStart={{ venv_dir }}/bin/gunicorn --workers 3 --bind 127.0.0.1:5000 run:app
          Restart=always

          [Install]
          WantedBy=multi-user.target
      notify:
        - Reload systemd

  handlers:
    - name: Enable Nginx site
      file:
        src: /etc/nginx/sites-available/devpilot
        dest: /etc/nginx/sites-enabled/devpilot
        state: link

    - name: Reload Nginx
      service:
        name: nginx
        state: reloaded

    - name: Reload systemd
      systemd:
        daemon_reload: yes
        name: gunicorn
        state: restarted
        enabled: yes