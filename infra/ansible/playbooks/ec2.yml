---
- name: Desplegar DevPilot (Flask + React) detrás de Nginx y Gunicorn
  hosts: web
  become: true

  vars:
    app_root: /home/ubuntu/DevPilot
    backend_dir: "{{ app_root }}/Backend"
    frontend_dir: "{{ app_root }}/frontend"
    venv_dir: "{{ backend_dir }}/venv"

  tasks:
    - name: Limpiar Gunicorn anterior
      block:
        - name: Detener Gunicorn
          systemd:
            name: gunicorn
            state: stopped
          ignore_errors: yes

        - name: Eliminar servicio de Gunicorn
          file:
            path: /etc/systemd/system/gunicorn.service
            state: absent

        - name: Recargar systemd
          systemd:
            daemon_reload: yes

    - name: Limpiar configuración previa de Nginx
      block:
        - name: Detener Nginx
          systemd:
            name: nginx
            state: stopped
          ignore_errors: yes

        - name: Eliminar configuración de sitios disponibles
          file:
            path: /etc/nginx/sites-available
            state: absent

        - name: Eliminar configuración de sitios habilitados
          file:
            path: /etc/nginx/sites-enabled
            state: absent

        - name: Recrear directorios
          file:
            path: "{{ item }}"
            state: directory
            mode: '0755'
          loop:
            - /etc/nginx/sites-available
            - /etc/nginx/sites-enabled

        - name: Reiniciar Nginx
          systemd:
            name: nginx
            state: started
            enabled: true

    - name: Instalar dependencias del sistema
      apt:
        name:
          - openjdk-17-jdk
          - python3-venv
          - python3-pip
          - git
          - nginx
          - nodejs
          - npm
        update_cache: yes

    - name: Clonar DevPilot
      git:
        repo: 'https://github.com/ProjectLabTeam2/DevPilot.git'
        dest: "{{ app_root }}"
        version: main
        force: yes
      become_user: ubuntu

    - name: Crear entorno virtual limpio
      shell: |
        rm -rf "{{ venv_dir }}"
        python3 -m venv venv
      args:
        chdir: "{{ backend_dir }}"
      become_user: ubuntu

    - name: Actualizar pip e instalar requirements
      pip:
        requirements: "{{ backend_dir }}/requirements.txt"
        virtualenv: "{{ venv_dir }}"
      become_user: ubuntu

    - name: Instalar Gunicorn
      pip:
        name: gunicorn
        state: present
        virtualenv: "{{ venv_dir }}"
      become_user: ubuntu

    - name: Crear archivo .env
      copy:
        dest: "{{ backend_dir }}/.env"
        content: |
          FLASK_ENV=production
          SECRET_KEY={{ lookup('env','SECRET_KEY') }}
          JWT_SECRET_KEY={{ lookup('env','JWT_SECRET_KEY') }}
          DB_HOST={{ lookup('env','RDS_ENDPOINT') }}
          DB_USER={{ lookup('env','DB_USER') }}
          DB_PASSWORD={{ lookup('env','DB_PASSWORD') }}
          DB_NAME=devpilotdb
        owner: ubuntu
        group: ubuntu
        mode: '0600'

    - name: Ejecutar migraciones de base de datos
      shell: |
        "{{ venv_dir }}/bin/flask" db upgrade
      args:
        chdir: "{{ backend_dir }}"
        executable: /bin/bash
      become_user: ubuntu
      environment:
        FLASK_ENV: production
        FLASK_APP: run.py
        SECRET_KEY: "{{ lookup('env','SECRET_KEY') }}"
        JWT_SECRET_KEY: "{{ lookup('env','JWT_SECRET_KEY') }}"
        DB_HOST: "{{ lookup('env','RDS_ENDPOINT') }}"
        DB_USER: "{{ lookup('env','DB_USER') }}"
        DB_PASSWORD: "{{ lookup('env','DB_PASSWORD') }}"
        DB_NAME: devpilotdb

    - name: Construir frontend
      shell: |
        npm ci
        npm run build
      args:
        chdir: "{{ frontend_dir }}"
      become_user: ubuntu

    - name: Asegurar permisos para Nginx en carpetas del frontend
      block:
        - name: Permitir a otros ejecutar /home/ubuntu
          file:
            path: /home/ubuntu
            mode: '0755'

        - name: Permitir a otros ejecutar /home/ubuntu/DevPilot
          file:
            path: "{{ app_root }}"
            mode: '0755'

        - name: Permitir a otros ejecutar /home/ubuntu/DevPilot/frontend
          file:
            path: "{{ frontend_dir }}"
            mode: '0755'

        - name: Permitir lectura recursiva de dist para Nginx
          file:
            path: "{{ frontend_dir }}/dist"
            mode: '0755'
            recurse: yes

    - name: Crear configuración Nginx para DevPilot
      copy:
        dest: /etc/nginx/sites-available/devpilot
        content: |
          server {
              listen 80;
              server_name _;

              root {{ frontend_dir }}/dist;
              index index.html;

              location /api {
                  proxy_pass http://127.0.0.1:5512;
                  proxy_http_version 1.1;
                  proxy_set_header Host $host;
                  proxy_set_header X-Real-IP $remote_addr;
                  proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
                  proxy_set_header X-Forwarded-Proto $scheme;
              }

              location / {
                  try_files $uri /index.html;
              }

              error_page 404 /index.html;
          }

    - name: Habilitar sitio devpilot en Nginx
      file:
        src: /etc/nginx/sites-available/devpilot
        dest: /etc/nginx/sites-enabled/devpilot
        state: link

    - name: Validar configuración de Nginx
      shell: nginx -t
      register: nginx_test
      failed_when: "'successful' not in nginx_test.stderr"

    - name: Reiniciar Nginx
      systemd:
        name: nginx
        state: restarted
        enabled: true

    - name: Crear servicio Gunicorn
      copy:
        dest: /etc/systemd/system/gunicorn.service
        content: |
          [Unit]
          Description=Gunicorn for DevPilot
          After=network.target

          [Service]
          User=ubuntu
          WorkingDirectory={{ backend_dir }}
          EnvironmentFile={{ backend_dir }}/.env
          ExecStart={{ venv_dir }}/bin/gunicorn -w 3 -b 127.0.0.1:5512 run:app
          Restart=always

          [Install]
          WantedBy=multi-user.target

    - name: Recargar y arrancar Gunicorn
      systemd:
        daemon_reload: yes
        name: gunicorn
        state: started
        enabled: yes

    - name: Verificar que Nginx responde en puerto 80
      uri:
        url: http://localhost/api/health
        status_code: 200
      register: nginx_healthcheck
      retries: 5
      delay: 3
      until: nginx_healthcheck.status == 200
